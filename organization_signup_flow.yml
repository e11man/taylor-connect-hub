# Organization Signup Flow with Email Confirmation and Admin Approval
# Complete Implementation Guide

## Overview
This YAML defines the complete flow for organization registration, including email confirmation and admin approval before login access is granted.

## Flow Steps

### 1. Organization Registration Form
- **Location**: `/organization-register` page
- **Form Fields**:
  - Organization Name (required)
  - Contact Person Name (required)
  - Email Address (required)
  - Password (required, min 8 chars)
  - Confirm Password (required, must match)
  - Organization Description (required)
  - Website (optional)
  - Phone Number (optional)

### 2. Email Confirmation Process
- **Trigger**: After form submission and validation
- **Action**: Send verification email with 6-digit OTP
- **Email Service**: Resend (using provided API key)
- **Email Content**:
  - Subject: "Verify Your Organization Registration - Community Connect"
  - HTML template with organization branding
  - 6-digit OTP code prominently displayed
  - Clear instructions for verification
  - Note about pending admin approval

### 3. OTP Verification
- **Component**: `OrganizationOTPVerification.tsx`
- **Process**:
  - User enters 6-digit code from email
  - Verify OTP with Supabase auth
  - On success: Mark email as confirmed in database
  - Show success message about pending admin approval
  - Redirect to pending approval page

### 4. Admin Approval Process
- **Location**: Admin Dashboard (`/admin`)
- **Status**: Organization remains "pending" until approved
- **Admin Actions**:
  - View pending organizations list
  - Review organization details
  - Approve or reject with comments
  - Send approval/rejection notification emails

### 5. Login Access Control
- **Before Approval**: Login attempts blocked with clear message
- **After Approval**: Full access to organization dashboard
- **Status Check**: Verify organization status on every login attempt

## Database Schema Requirements

### Organizations Table
```sql
CREATE TABLE organizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  website TEXT,
  phone TEXT,
  contact_email TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  email_confirmed BOOLEAN DEFAULT FALSE,
  approved_at TIMESTAMP WITH TIME ZONE,
  approved_by UUID REFERENCES auth.users(id),
  rejection_reason TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### User Roles Table
```sql
CREATE TABLE user_roles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  role user_role NOT NULL DEFAULT 'user',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);
```

## Email Templates

### 1. Registration Confirmation Email
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Verify Your Organization Registration</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
            <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
        </div>
        
        <div style="background-color: #f8f9fa; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
            <h2 style="color: #333; margin-top: 0;">Verify Your Organization Registration</h2>
            
            <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                Hello <strong>{{organizationName}}</strong>,
            </p>
            
            <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                Thank you for registering your organization with Community Connect. To complete your registration, please use the verification code below:
            </p>
            
            <div style="text-align: center; margin: 30px 0;">
                <div style="background-color: #00AFCE; color: white; font-size: 32px; font-weight: bold; padding: 20px; border-radius: 8px; letter-spacing: 8px; display: inline-block;">
                    {{otp}}
                </div>
            </div>
            
            <p style="color: #666; font-size: 14px; margin-top: 20px;">
                This code will expire in 10 minutes. If you didn't request this verification, please ignore this email.
            </p>
            
            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin-top: 20px;">
                <p style="color: #856404; margin: 0; font-size: 14px;">
                    <strong>Important:</strong> After email verification, your organization will need admin approval before you can access the platform. You'll receive an email notification once approved.
                </p>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #888; font-size: 12px;">
                Community Connect - Connecting volunteers with meaningful opportunities
            </p>
        </div>
    </div>
</body>
</html>
```

### 2. Admin Approval Email
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Organization Approved - Community Connect</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
            <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
        </div>
        
        <div style="background-color: #d4edda; border: 1px solid #c3e6cb; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
            <h2 style="color: #155724; margin-top: 0;">🎉 Your Organization Has Been Approved!</h2>
            
            <p style="color: #155724; font-size: 16px; margin-bottom: 15px;">
                Hello <strong>{{organizationName}}</strong>,
            </p>
            
            <p style="color: #155724; font-size: 16px; margin-bottom: 15px;">
                Great news! Your organization has been approved by our admin team. You can now access your organization dashboard and start creating volunteer opportunities.
            </p>
            
            <div style="text-align: center; margin: 30px 0;">
                <a href="{{loginUrl}}" style="background-color: #00AFCE; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">
                    Access Your Dashboard
                </a>
            </div>
            
            <p style="color: #155724; font-size: 14px; margin-top: 20px;">
                You can now:
            </p>
            <ul style="color: #155724; font-size: 14px;">
                <li>Create and manage volunteer opportunities</li>
                <li>View participant registrations</li>
                <li>Communicate with volunteers</li>
                <li>Track event success metrics</li>
            </ul>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #888; font-size: 12px;">
                Community Connect - Connecting volunteers with meaningful opportunities
            </p>
        </div>
    </div>
</body>
</html>
```

### 3. Admin Rejection Email
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Organization Registration Update - Community Connect</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
            <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
        </div>
        
        <div style="background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
            <h2 style="color: #721c24; margin-top: 0;">Organization Registration Update</h2>
            
            <p style="color: #721c24; font-size: 16px; margin-bottom: 15px;">
                Hello <strong>{{organizationName}}</strong>,
            </p>
            
            <p style="color: #721c24; font-size: 16px; margin-bottom: 15px;">
                After careful review, we regret to inform you that your organization registration has not been approved at this time.
            </p>
            
            <div style="background-color: #fff; border: 1px solid #ddd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p style="color: #721c24; margin: 0; font-size: 14px;">
                    <strong>Reason:</strong> {{rejectionReason}}
                </p>
            </div>
            
            <p style="color: #721c24; font-size: 14px; margin-top: 20px;">
                If you believe this decision was made in error or if you would like to provide additional information, please contact our support team.
            </p>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #888; font-size: 12px;">
                Community Connect - Connecting volunteers with meaningful opportunities
            </p>
        </div>
    </div>
</body>
</html>
```

## Edge Functions

### 1. Send Organization OTP
```typescript
// supabase/functions/send-organization-otp/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';
import { Resend } from "npm:resend@2.0.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const resend = new Resend(Deno.env.get('RESEND_API_KEY'));

interface OTPEmailRequest {
  email: string;
  otp: string;
  organizationName: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    const { email, otp, organizationName }: OTPEmailRequest = body;

    if (!email || !otp || !organizationName) {
      throw new Error("Missing required fields: email, otp, or organizationName");
    }

    const emailResponse = await resend.emails.send({
      from: "Community Connect <onboarding@resend.dev>",
      to: [email],
      subject: "Verify Your Organization Registration - Community Connect",
      html: `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Verify Your Organization Registration</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="text-align: center; margin-bottom: 30px;">
                    <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
                    <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
                </div>
                
                <div style="background-color: #f8f9fa; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
                    <h2 style="color: #333; margin-top: 0;">Verify Your Organization Registration</h2>
                    
                    <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                        Hello <strong>${organizationName}</strong>,
                    </p>
                    
                    <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                        Thank you for registering your organization with Community Connect. To complete your registration, please use the verification code below:
                    </p>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <div style="background-color: #00AFCE; color: white; font-size: 32px; font-weight: bold; padding: 20px; border-radius: 8px; letter-spacing: 8px; display: inline-block;">
                            ${otp}
                        </div>
                    </div>
                    
                    <p style="color: #666; font-size: 14px; margin-top: 20px;">
                        This code will expire in 10 minutes. If you didn't request this verification, please ignore this email.
                    </p>
                    
                    <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin-top: 20px;">
                        <p style="color: #856404; margin: 0; font-size: 14px;">
                            <strong>Important:</strong> After email verification, your organization will need admin approval before you can access the platform. You'll receive an email notification once approved.
                        </p>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
                    <p style="color: #888; font-size: 12px;">
                        Community Connect - Connecting volunteers with meaningful opportunities
                    </p>
                </div>
            </div>
        </body>
        </html>
      `,
    });

    return new Response(JSON.stringify({ 
      success: true, 
      data: emailResponse 
    }), {
      status: 200,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  } catch (error: any) {
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message || "Failed to send verification email"
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});
```

### 2. Send Admin Approval Notification
```typescript
// supabase/functions/send-admin-approval/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';
import { Resend } from "npm:resend@2.0.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const resend = new Resend(Deno.env.get('RESEND_API_KEY'));

interface ApprovalRequest {
  organizationId: string;
  action: 'approve' | 'reject';
  rejectionReason?: string;
  adminUserId: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { organizationId, action, rejectionReason, adminUserId }: ApprovalRequest = await req.json();

    // Get organization details
    const { data: organization, error: orgError } = await supabaseClient
      .from('organizations')
      .select('*')
      .eq('id', organizationId)
      .single();

    if (orgError || !organization) {
      throw new Error('Organization not found');
    }

    // Get admin details
    const { data: adminUser } = await supabaseClient
      .from('profiles')
      .select('email')
      .eq('user_id', adminUserId)
      .single();

    // Update organization status
    const updateData: any = {
      status: action === 'approve' ? 'approved' : 'rejected',
      updated_at: new Date().toISOString()
    };

    if (action === 'approve') {
      updateData.approved_at = new Date().toISOString();
      updateData.approved_by = adminUserId;
    } else {
      updateData.rejection_reason = rejectionReason;
    }

    const { error: updateError } = await supabaseClient
      .from('organizations')
      .update(updateData)
      .eq('id', organizationId);

    if (updateError) {
      throw new Error('Failed to update organization status');
    }

    // Send email notification
    const emailTemplate = action === 'approve' ? `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>Organization Approved - Community Connect</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="text-align: center; margin-bottom: 30px;">
                  <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
                  <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
              </div>
              
              <div style="background-color: #d4edda; border: 1px solid #c3e6cb; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
                  <h2 style="color: #155724; margin-top: 0;">🎉 Your Organization Has Been Approved!</h2>
                  
                  <p style="color: #155724; font-size: 16px; margin-bottom: 15px;">
                      Hello <strong>${organization.name}</strong>,
                  </p>
                  
                  <p style="color: #155724; font-size: 16px; margin-bottom: 15px;">
                      Great news! Your organization has been approved by our admin team. You can now access your organization dashboard and start creating volunteer opportunities.
                  </p>
                  
                  <div style="text-align: center; margin: 30px 0;">
                      <a href="${Deno.env.get('SITE_URL')}/organization-login" style="background-color: #00AFCE; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">
                          Access Your Dashboard
                      </a>
                  </div>
                  
                  <p style="color: #155724; font-size: 14px; margin-top: 20px;">
                      You can now:
                  </p>
                  <ul style="color: #155724; font-size: 14px;">
                      <li>Create and manage volunteer opportunities</li>
                      <li>View participant registrations</li>
                      <li>Communicate with volunteers</li>
                      <li>Track event success metrics</li>
                  </ul>
              </div>
              
              <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
                  <p style="color: #888; font-size: 12px;">
                      Community Connect - Connecting volunteers with meaningful opportunities
                  </p>
              </div>
          </div>
      </body>
      </html>
    ` : `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>Organization Registration Update - Community Connect</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="text-align: center; margin-bottom: 30px;">
                  <h1 style="color: #00AFCE; margin: 0;">Community Connect</h1>
                  <p style="color: #666; margin: 10px 0;">Connecting volunteers with meaningful opportunities</p>
              </div>
              
              <div style="background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 30px; border-radius: 8px; margin-bottom: 30px;">
                  <h2 style="color: #721c24; margin-top: 0;">Organization Registration Update</h2>
                  
                  <p style="color: #721c24; font-size: 16px; margin-bottom: 15px;">
                      Hello <strong>${organization.name}</strong>,
                  </p>
                  
                  <p style="color: #721c24; font-size: 16px; margin-bottom: 15px;">
                      After careful review, we regret to inform you that your organization registration has not been approved at this time.
                  </p>
                  
                  <div style="background-color: #fff; border: 1px solid #ddd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                      <p style="color: #721c24; margin: 0; font-size: 14px;">
                          <strong>Reason:</strong> ${rejectionReason || 'No specific reason provided'}
                      </p>
                  </div>
                  
                  <p style="color: #721c24; font-size: 14px; margin-top: 20px;">
                      If you believe this decision was made in error or if you would like to provide additional information, please contact our support team.
                  </p>
              </div>
              
              <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
                  <p style="color: #888; font-size: 12px;">
                      Community Connect - Connecting volunteers with meaningful opportunities
                  </p>
              </div>
          </div>
      </body>
      </html>
    `;

    const emailResponse = await resend.emails.send({
      from: "Community Connect <notifications@resend.dev>",
      to: [organization.contact_email],
      subject: action === 'approve' 
        ? "Organization Approved - Community Connect" 
        : "Organization Registration Update - Community Connect",
      html: emailTemplate,
    });

    return new Response(JSON.stringify({ 
      success: true, 
      data: emailResponse,
      organization: organization,
      action: action
    }), {
      status: 200,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  } catch (error: any) {
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message || "Failed to process approval"
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});
```

## Frontend Components

### 1. Organization Registration Form
```typescript
// src/pages/OrganizationRegister.tsx
// Enhanced version with email confirmation flow

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (validate()) {
    setIsLoading(true);
    
    try {
      console.log('🔄 Starting organization registration for:', formData.email);
      
      // First, generate and send OTP
      console.log('📧 Generating and sending OTP...');
      const otp = await sendOTP(formData.email, formData.organizationName);
      console.log('✅ OTP generated and sent successfully');
      
      // Then sign up with Supabase using the OTP we generated
      console.log('👤 Creating Supabase user account...');
      const { data, error } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            user_type: 'organization',
            organization_name: formData.organizationName,
            description: formData.organizationDescription,
            website: formData.website,
            phone: formData.phoneNumber,
            otp_code: otp  // Store OTP for verification
          }
        }
      });

      if (error) {
        console.error('❌ Supabase signup error:', error);
        throw error;
      }

      console.log('✅ User account created successfully');
      
      toast({
        title: "Verification Code Sent! 📧",
        description: "Please check your email for a 6-digit verification code.",
      });

      // Show OTP verification step
      setShowOTPVerification(true);
    } catch (error: any) {
      console.error('❌ Registration failed:', error);
      toast({
        title: "Registration failed",
        description: error.message || "Failed to create account. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  }
};
```

### 2. Admin Dashboard Organization Management
```typescript
// src/pages/AdminDashboard.tsx
// Enhanced organization approval functions

const approveOrganization = async (orgId: string) => {
  try {
    // Call edge function to handle approval and email notification
    const { data, error } = await supabase.functions.invoke('send-admin-approval', {
      body: {
        organizationId: orgId,
        action: 'approve',
        adminUserId: user?.id
      }
    });

    if (error) throw error;

    toast({
      title: "Organization approved! 🎊",
      description: "Approval email has been sent to the organization.",
    });

    await fetchOrganizations();
  } catch (error) {
    console.error('Error approving organization:', error);
    toast({
      title: "Error",
      description: "Failed to approve organization.",
      variant: "destructive",
    });
  }
};

const rejectOrganization = async (orgId: string, reason: string) => {
  if (!confirm("Are you sure you want to reject this organization?")) return;

  try {
    // Call edge function to handle rejection and email notification
    const { data, error } = await supabase.functions.invoke('send-admin-approval', {
      body: {
        organizationId: orgId,
        action: 'reject',
        rejectionReason: reason,
        adminUserId: user?.id
      }
    });

    if (error) throw error;

    toast({
      title: "Organization rejected",
      description: "Rejection email has been sent to the organization.",
    });

    await fetchOrganizations();
  } catch (error) {
    console.error('Error rejecting organization:', error);
    toast({
      title: "Error",
      description: "Failed to reject organization.",
      variant: "destructive",
    });
  }
};
```

### 3. Login Access Control
```typescript
// src/contexts/AuthContext.tsx
// Enhanced auth state management

useEffect(() => {
  let mounted = true;
  
  const { data: { subscription } } = supabase.auth.onAuthStateChange(
    async (event, session) => {
      if (!mounted) return;
      
      if (event === 'SIGNED_IN' && session?.user) {
        console.log('🔍 Checking user status after sign in for:', session.user.email);
        
        try {
          // First check if it's an organization
          const { data: orgData, error: orgError } = await supabase
            .from('organizations')
            .select('status, email_confirmed')
            .eq('user_id', session.user.id)
            .maybeSingle();

          if (orgData) {
            // This is an organization - check status
            console.log('👔 Organization status:', orgData.status);
            
            if (!orgData.email_confirmed) {
              await supabase.auth.signOut();
              toast({
                title: "Email Not Verified",
                description: "Please verify your email address before logging in.",
                variant: "destructive",
              });
              return;
            }
            
            if (orgData.status === 'pending') {
              await supabase.auth.signOut();
              toast({
                title: "Organization Pending Approval",
                description: "Your organization requires admin approval before access. You'll receive an email when approved.",
                variant: "destructive",
              });
              return;
            }
            
            if (orgData.status === 'rejected') {
              await supabase.auth.signOut();
              toast({
                title: "Organization Rejected",
                description: "Your organization registration has been rejected. Please contact support for more information.",
                variant: "destructive",
              });
              return;
            }
            
            if (orgData.status !== 'approved') {
              await supabase.auth.signOut();
              toast({
                title: "Organization Access Denied",
                description: `Organization status: ${orgData.status}. Contact admin for assistance.`,
                variant: "destructive",
              });
              return;
            }
          }
          
          // Set user if all checks pass
          setUser(session.user);
        } catch (error) {
          console.error('Error checking user status:', error);
          await supabase.auth.signOut();
        }
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
      }
    }
  );

  return () => {
    mounted = false;
    subscription.unsubscribe();
  };
}, []);
```

## Database Triggers

### 1. Handle New Organization Registration
```sql
-- Create trigger function for new organization registrations
CREATE OR REPLACE FUNCTION public.handle_new_organization()
RETURNS TRIGGER 
LANGUAGE plpgsql 
SECURITY DEFINER
SET search_path TO 'public'
AS $$
BEGIN
  -- Set initial status as pending
  NEW.status := 'pending';
  NEW.email_confirmed := FALSE;
  
  -- Create user role entry
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.user_id, 'user')
  ON CONFLICT (user_id) DO NOTHING;
  
  RETURN NEW;
END;
$$;

-- Create trigger
CREATE TRIGGER handle_new_organization_trigger
  BEFORE INSERT ON public.organizations
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_organization();
```

### 2. Update Email Confirmed Status
```sql
-- Create trigger function to update email_confirmed when OTP is verified
CREATE OR REPLACE FUNCTION public.handle_email_verification()
RETURNS TRIGGER 
LANGUAGE plpgsql 
SECURITY DEFINER
SET search_path TO 'public'
AS $$
BEGIN
  -- If this is an organization user and email is confirmed
  IF NEW.email_confirmed_at IS NOT NULL AND OLD.email_confirmed_at IS NULL THEN
    -- Update organization email_confirmed status
    UPDATE public.organizations 
    SET email_confirmed = TRUE, updated_at = NOW()
    WHERE user_id = NEW.id;
  END IF;
  
  RETURN NEW;
END;
$$;

-- Create trigger
CREATE TRIGGER handle_email_verification_trigger
  AFTER UPDATE ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_email_verification();
```

## Environment Variables

### Required Environment Variables
```bash
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key

# Email Service (Resend)
RESEND_API_KEY=re_Xc4zR4o5_JRK4g9gDA6Jrkw1oXfzZhYLk

# Application URLs
SITE_URL=https://your-domain.com
```

## Deployment Steps

### 1. Database Setup
```sql
-- Run the database schema migrations
-- This includes the organizations table, user_roles table, and triggers
```

### 2. Edge Functions Deployment
```bash
# Deploy the edge functions
supabase functions deploy send-organization-otp
supabase functions deploy send-admin-approval

# Set environment variables for edge functions
supabase secrets set RESEND_API_KEY=re_Xc4zR4o5_JRK4g9gDA6Jrkw1oXfzZhYLk
supabase secrets set SITE_URL=https://your-domain.com
```

### 3. Frontend Deployment
```bash
# Build and deploy the frontend application
npm run build
# Deploy to your hosting platform (Vercel, Netlify, etc.)
```

## Testing Checklist

### Email Confirmation Flow
- [ ] Organization registration form submits successfully
- [ ] OTP email is sent with correct content
- [ ] OTP verification works correctly
- [ ] Email confirmed status is updated in database
- [ ] User is redirected to pending approval page

### Admin Approval Flow
- [ ] Admin can view pending organizations
- [ ] Admin can approve organizations
- [ ] Approval email is sent to organization
- [ ] Organization status is updated to 'approved'
- [ ] Organization can now log in successfully

### Login Access Control
- [ ] Unverified organizations cannot log in
- [ ] Pending organizations cannot log in
- [ ] Rejected organizations cannot log in
- [ ] Approved organizations can log in successfully
- [ ] Clear error messages are displayed

### Error Handling
- [ ] Network errors are handled gracefully
- [ ] Invalid OTP codes show appropriate errors
- [ ] Email sending failures don't break the flow
- [ ] Database errors are logged and handled

## Security Considerations

### 1. Rate Limiting
- Implement rate limiting for OTP requests
- Limit email sending frequency per email address
- Add CAPTCHA for registration form

### 2. Data Validation
- Validate all form inputs server-side
- Sanitize email content to prevent XSS
- Validate organization data before approval

### 3. Access Control
- Ensure only admins can approve/reject organizations
- Verify user permissions before allowing actions
- Log all admin actions for audit trail

### 4. Email Security
- Use secure email templates
- Validate email addresses before sending
- Implement email verification tokens with expiration

## Monitoring and Logging

### 1. Application Logs
- Log all organization registrations
- Log all admin approval/rejection actions
- Log email sending attempts and results
- Log login attempts and failures

### 2. Error Tracking
- Monitor edge function errors
- Track email delivery failures
- Monitor database connection issues
- Alert on critical system failures

### 3. Analytics
- Track organization registration conversion rates
- Monitor admin approval times
- Track email open and click rates
- Monitor system performance metrics

## Maintenance Tasks

### 1. Regular Cleanup
- Clean up expired OTP codes
- Archive old organization records
- Clean up failed email attempts
- Optimize database queries

### 2. Security Updates
- Regularly update dependencies
- Rotate API keys periodically
- Review and update security policies
- Monitor for security vulnerabilities

### 3. Performance Optimization
- Optimize database indexes
- Cache frequently accessed data
- Monitor and optimize edge functions
- Review and optimize email templates 